/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dev.lukecollier;

import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.kinesis.model.CreateStreamRequest;
import software.amazon.awssdk.services.kinesis.KinesisAsyncClient;
import software.amazon.awssdk.http.async.SdkAsyncHttpClient;
import software.amazon.awssdk.http.Protocol;
import software.amazon.awssdk.utils.AttributeMap;
import software.amazon.awssdk.http.nio.netty.*;
import software.amazon.awssdk.core.*;
import software.amazon.awssdk.services.kinesis.KinesisAsyncClient;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;
import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;
import software.amazon.awssdk.services.kinesis.KinesisAsyncClient;
import software.amazon.awssdk.services.kinesis.model.*;
import static java.lang.System.out;

public class App {

    public static void main(String[] args) {
      Region region = Region.US_EAST_1;
      try {
        java.net.URI targetUri = new java.net.URI("http://0.0.0.0:4566");
        AwsCredentialsProvider credentialsProvider = StaticCredentialsProvider.create(
            AwsBasicCredentials.create("test", "test")
            );


        SdkAsyncHttpClient nettyNioAsyncHttpClient = 
          NettyNioAsyncHttpClient
            .builder()
            .maxConcurrency(1)
            .protocol(Protocol.HTTP2)
            .buildWithDefaults(AttributeMap.empty());

        KinesisAsyncClient kinesisClient = KinesisAsyncClient
                               .builder()
                               .region(region)
                               .httpClient(nettyNioAsyncHttpClient)
                               .credentialsProvider(credentialsProvider)
                               .endpointOverride(targetUri)
                               .build();


        out.println("PutRecord::start");
        PutRecordRequest putRecordRequest = PutRecordRequest.builder()
          .partitionKey("partitionkey")
          .streamName("test-stream")
          .data(SdkBytes.fromUtf8String("hello, world!"))
          .build();
        String shardId = kinesisClient.putRecord(putRecordRequest).get().shardId();
        out.println("PutRecord::finish");

        out.println("GetShardIterator::start");
        GetShardIteratorRequest getShardIteratorRequest = GetShardIteratorRequest.builder().shardId(shardId).shardIteratorType(ShardIteratorType.TRIM_HORIZON).streamName("test-stream").build();
        String shardIterator = kinesisClient.getShardIterator(getShardIteratorRequest).get().shardIterator();
        out.println("shardIterator=" + shardIterator);
        out.println("GetShardIterator::finish");


        GetRecordsRequest getRecordRequest = GetRecordsRequest.builder().shardIterator(shardIterator).build();
        while (true) {
          out.println("GetRecords::start");
          GetRecordsResponse recordsResponse = kinesisClient.getRecords(getRecordRequest).get();
          if (recordsResponse.hasRecords()) {
            break;
          }
          shardIterator = recordsResponse.nextShardIterator();
          out.println("GetRecords::finish");
        }

        out.println("success");
      } catch(Exception e) {
        out.println("failed with " + e.getMessage());
      }
    }
}
